import m2m.qvt.oml.ExampleJavaLib;

modeltype PIM uses PIM('http://benchmarkdp.datagenerator.model.PIM');
	
transformation AddWord(inout model:PIM);
configuration property numWords:String;
configuration property numWordTable:String;

main() {
	var d := model.rootObjects()[Document];
	var paragraphs := d.pages.elements->selectByType(Paragraph);
	var pc := paragraphs->size();
	var wc := 0;
	if (numWords<>null) {
		wc := stringToInt(numWords) - stringToInt(numWordTable);
	} else {
		var rn := getRandomReal();
		switch {
			case (rn < 0.018) wc := getRandomBetween(1,100); 
			case (rn >= 0.018 and rn < 0.367) wc := getRandomBetween(101,1000);
			case (rn >= 0.367 and rn < 0.765) wc := getRandomBetween(1001,5000);
			case (rn >= 0.765 and rn < 0.882) wc := getRandomBetween(5001,10000);
			case (rn >= 0.882 and rn < 0.971) wc := getRandomBetween(10001,30000);
			case (rn >= 0.971 and rn < 1) wc := getRandomBetween(30001,399385);
			else null; 
		};	
	};
	d->map AddCalcLayout(wc, pc);
		
	if (paragraphs->size() > 0) {
		
		// put at least one word to each paragraph
		var i:= 1;
		while (i <= paragraphs->size() and wc > 0) {
			var paragraph := paragraphs->asSequence()->at(i);
			paragraph->map AddWord(wc);
			wc := wc - 1;		
			i := i + 1;
		};
	
		// put remaining words randomly 
		while (wc > 0) {
			var pos := getRandom(paragraphs->size());
			var paragraph := paragraphs->asSequence()->at(pos);
			paragraph->map AddWord(wc);
			wc := wc - 1;		
		};	
	}
	
}
mapping inout PIM::Document::AddCalcLayout(inout wc:Integer, inout pc:Integer) {
	var rat := wc / pc; 
	if (wc > 20000 or rat < 20) {
		calcLayout := false;
	} else {
		calcLayout := true;
	}
}

mapping inout PIM::Paragraph::AddWord(inout i:Integer) {
	var t := object Word {
		value := getRandomWord();
	}; 
	words += t;
}
