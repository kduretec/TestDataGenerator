import m2m.qvt.oml.ExampleJavaLib;

modeltype PIM uses PIM('http://benchmarkdp.datagenerator.model.PIM');
modeltype PSM uses PSMLibre('http://benchmarkdp.datagenerator.model.PSMLibre');
	

transformation PIM2Libre(in source:PIM, out target:PSM);
//configuration property textbox : String;
configuration property format : String;
//configuration property formatCode : String;
configuration property platform : String;
main() {
	log("Translating from PIM to PSMLibre");
	source.rootObjects()[Document].map DocumentToDocument();
}


mapping PIM::Document::DocumentToDocument():PSM::Document {
	name := self.name;
	documentFormat := format;
	documentPlatform := platform;
	self.pages->forEach(p) {
		pages += p->map PageToPage();
	}
}

mapping PIM::Page::PageToPage():PSM::Page {
	self.elements->forEach(e) {
		if (e.oclIsTypeOf(PIM::Paragraph)) {
			var temp:Real := getRandomReal();
			elements += e.oclAsType(PIM::Paragraph)->map ParagraphToParagraph();
		};
		if (e.oclIsTypeOf(PIM::Table)) {
			elements += e.oclAsType(PIM::Table)->map TableToTable();
		};
		if (e.oclIsTypeOf(PIM::Image)) {
			elements += e.oclAsType(PIM::Image)->map ImageToImage();
		};
	}
}

mapping PIM::Paragraph::ParagraphToParagraph():PSM::Paragraph {
//	paragraphSpacing := 1.0;
//	lineSpacing := 1.0;
//	indent := 1.0;
	ID := generateUID();
	parentID := self.ID; 
	var i:Integer := 1;
	var si:Integer := self.words->asSequence()->size(); 
	while (i <= si) {
	 var pos:Integer := getRandomBetween(i,si);
	 if (pos - i > 20) {
	 	pos := i + 20 
	 };
	 var tt := self.words->asSequence()->subSequence(i,pos);
	 var tSize := tt->size();
	 i := pos + 1;
	 var stVal:String := turnSeqToString(tt.value->asList());
	 var temp:Real := getRandomReal();
	 var sT:Text := null;
	 if (temp <= 1) {
	 	sT := object SimpleText {
	// 		size := 10;
	//		color := Color::BLACK;
	 		value := stVal;
	// 		background := Color::WHITE;
	 	};
	 } else {
	// 	sT := object HyperLink {
	//		value := stVal;
	//		url := "http://www.google.com"	 		
	// 	}
	 };
	 
	 words += sT;
	 
	}
}

mapping PIM::Table::TableToTable():PSM::Table {
	ID := generateUID();
	parentID := self.ID; 
	numRows := self.numRows;
	numCol := self.numCol;
	row := self.row->map RowToRow();
}

mapping PIM::Row::RowToRow():PSM::Row {
	cell := self.cell->map CellToCell();
}

mapping PIM::Cell::CellToCell():PSM::Cell {
	self.element->forEach(e) {
		elements += e.oclAsType(PIM::Paragraph)->map ParagraphToParagraph();
	}
}

mapping PIM::Image::ImageToImage():PSM::Image {
	ID := generateUID();
	parentID := self.ID; 
	height := self.height;
	width  := self.width;
	type   := self.type;
}

