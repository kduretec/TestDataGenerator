import m2m.qvt.oml.ExampleJavaLib;

modeltype PIM uses PIM('http://benchmarkdp.datagenerator.model.PIM');
modeltype PSM uses PSMLibre('http://benchmarkdp.datagenerator.model.PSMLibre');
	

transformation PIM2Libre(in source:PIM, out target:PSM);
configuration property paragraphImpl : String;

main() {
	source.rootObjects()[Document].map DocumentToDocument();
}

mapping PIM::Document::DocumentToDocument():PSM::Document {
	name := self.name;
	author := self.author;
	documentBackground := mapColor(self.documentBackground);
	self.pages->forEach(p) {
		pages += p->map PageToPage();
	}
}

mapping PIM::Page::PageToPage():PSM::Page {

	if (paragraphImpl = null) {
		var rnd := getRandomReal(); 
		switch {
			case(rnd < 0.80) paragraphImpl := "allSimpleParagraph";
			case(rnd >= 0.8 and rnd < 0.9) paragraphImpl := "allTextBox";
			else paragraphImpl := "mixture";
		}
	};
	
	var percSP := 0.0;
	var percTB := 0.0;
	var percCB := 0.0;
	
	switch {
		case (paragraphImpl = "allSimpleParagraph") {percSP := 1.0; percTB:=0.0;};
		case (paragraphImpl = "allTextBox") {percSP := 0.0; percTB:=1.0;};
		else {percSP := 0.8; percTB:=0.20;};
	};
	

	self.elements->forEach(e) {
		if (e.oclIsTypeOf(PIM::Paragraph)) {
			var temp := getRandomReal();
			if (temp < percSP) {
				elements += e.oclAsType(PIM::Paragraph)->map ParagraphToParagraph();
			} else if (temp < percSP + percTB) {
				elements += e.oclAsType(PIM::Paragraph)->map ParagraphToTextBox();
			};
		};
		if (e.oclIsTypeOf(PIM::Table)) {
			elements += e.oclAsType(PIM::Table)->map TableToTable();
		};
		if (e.oclIsTypeOf(PIM::Image)) {
			elements += e.oclAsType(PIM::Image)->map ImageToImage();
		};
	}
}

abstract mapping PIM::Element::ElementToElement():PSM::Element {
	ID := generateUID();
	parentID := self.ID; 
	backgroundColor := mapColor(self.backgroundColor);
}

abstract mapping PIM::TextContainer::TextContainerToTextContainer():PSM::TextContainer 
	inherits PIM::Element::ElementToElement {
			fontFamily := FontFamily::ARIAL;
}

mapping PIM::Paragraph::ParagraphToParagraph():PSM::Paragraph 
	inherits PIM::TextContainer::TextContainerToTextContainer {
		paragraphSpacing := 1.0;
		lineSpacing := 1.0;
		indent := 1.0;
		var i:Integer := 1;
		var si:Integer := self.words->asSequence()->size(); 
		while (i <= si) {
		 var pos:Integer := getRandomBetween(i,si);
		 if (pos - i > 20) {
		 	pos := i + 20 
		 };
		 var tt := self.words->asSequence()->subSequence(i,pos);
		 var tSize := tt->size();
		 i := pos + 1;
		 var stVal:String := turnSeqToString(tt.value->asList());
		 var temp:Real := getRandomReal();
		 var sT:Text := null;
	 	 sT := object Text {
	 		value := stVal;
	 	 };
		 text += sT;		 
		}
}

mapping PIM::Paragraph::ParagraphToTextBox():PSM::TextBox 
	inherits PIM::TextContainer::TextContainerToTextContainer {
		var i:Integer := 1;
		var si:Integer := self.words->asSequence()->size(); 
		while (i <= si) {
		 var pos:Integer := getRandomBetween(i,si);
		 if (pos - i > 20) {
		 	pos := i + 20 
		 };
		 var tt := self.words->asSequence()->subSequence(i,pos);
		 var tSize := tt->size();
		 i := pos + 1;
		 var stVal:String := turnSeqToString(tt.value->asList());
		 var temp:Real := getRandomReal();
		 var sT:Text := null;
	 	 sT := object Text {
	 		value := stVal;
	 	 };
		 text += sT;		 
		}
}

mapping PIM::Table::TableToTable():PSM::Table {
	ID := generateUID();
	parentID := self.ID; 
	numRows := self.numRows;
	numCol := self.numCol;
	row := self.row->map RowToRow();
}

mapping PIM::Row::RowToRow():PSM::Row {
	cell := self.cell->map CellToCell();
}

mapping PIM::Cell::CellToCell():PSM::Cell {
	self.element->forEach(e) {
		elements += e.oclAsType(PIM::Paragraph)->map ParagraphToParagraph();
	}
}

mapping PIM::Image::ImageToImage():PSM::Image {
	ID := generateUID();
	parentID := self.ID; 
	height := self.height;
	width  := self.width;
	type   := self.type;
}

helper mapColor(in col:PIM::Color):PSMLibre::Color {
	switch {
		case (col = PIM::Color::WHITE) return PSMLibre::Color::WHITE;
		case (col = PIM::Color::BLACK) return PSMLibre::Color::BLACK;
		case (col = PIM::Color::BLUE) return PSMLibre::Color::BLUE;
		case (col = PIM::Color::RED) return PSMLibre::Color::RED;
		else return null;
	}
}
